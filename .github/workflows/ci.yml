name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-typecheck:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: TypeScript compilation check
      run: npx tsc --noEmit

  build-test:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Restore certificate into a temp keychain
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        echo "$MAC_CERT_B64" | base64 --decode > cert.p12
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security import cert.p12 -k build.keychain -P "$MAC_CERT_PASSWORD" \
          -T /usr/bin/codesign -T /usr/bin/productbuild
        security set-key-partition-list -S apple-tool:,apple: -s \
          -k "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
      env:
        MAC_CERT_B64: ${{ secrets.MAC_CERT_B64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}

    # Force rebuild native modules for the target platform
    - name: Rebuild native modules
      run: npm rebuild

    - name: Build renderer
      run: npm run build

    # Clear electron cache to ensure fresh build
    - name: Clear Electron cache
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          rm -rf ~/Library/Caches/electron
          rm -rf ~/.cache/electron
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          rm -rf ~/.cache/electron
        else
          rm -rf %LOCALAPPDATA%\electron\Cache || true
        fi

    # Add architecture-specific handling for macOS
    - name: Set macOS architecture
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # Check system architecture and set appropriate target
        if [[ $(uname -m) == "arm64" ]]; then
          echo "TARGET_ARCH=arm64" >> $GITHUB_ENV
        else
          echo "TARGET_ARCH=x64" >> $GITHUB_ENV
        fi

    # Force electron rebuild for macOS with explicit version
    - name: Rebuild Electron for macOS
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # Get electron version from package.json
        ELECTRON_VERSION=$(node -p "require('./package.json').devDependencies.electron.replace('^', '')")
        echo "Rebuilding for Electron version: $ELECTRON_VERSION"
        npx @electron/rebuild --version=$ELECTRON_VERSION --force

    - name: Create distributables
      env:
        # Pass GitHub secrets as environment variables for macOS code signing
        OSX_SIGN_IDENTITY: ${{ matrix.os == 'macos-latest' && secrets.OSX_SIGN_IDENTITY || '' }}
        APPLE_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_ID || '' }}
        APPLE_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.APPLE_PASSWORD || '' }}
        APPLE_TEAM_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_TEAM_ID || '' }}
      run: npm run make

    - name: Test packaged app exists
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          test -d "out/Viberunner-win32-x64" || test -d "out/make"
          echo "✅ Windows package created successfully"
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          test -d "out/Viberunner-darwin-x64" || test -d "out/Viberunner-darwin-arm64" || test -d "out/make"
          echo "✅ macOS package created successfully"
          # Show package contents for debugging
          ls -la out/ || true
          find out/ -name "*.dmg" -exec ls -lh {} \; || true
          find out/ -name "*.app" -exec ls -lh {} \; || true
          # Verify code signing (if signed)
          if [ -d "out/Viberunner-darwin-arm64/Viberunner.app" ]; then
            codesign --verify --deep --strict --verbose=2 out/Viberunner-darwin-arm64/Viberunner.app || echo "⚠️ Code signing verification failed or app is unsigned"
          fi
          if [ -d "out/Viberunner-darwin-x64/Viberunner.app" ]; then
            codesign --verify --deep --strict --verbose=2 out/Viberunner-darwin-x64/Viberunner.app || echo "⚠️ Code signing verification failed or app is unsigned"
          fi
        else
          test -d "out/Viberunner-linux-x64" || test -d "out/make"
          echo "✅ Linux package created successfully"
        fi

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: viberunner-package-${{ matrix.os }}-${{ github.sha }}
        path: |
          out/**/*
        retention-days: 3

  build-status:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-test]
    if: always()

    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.lint-and-typecheck.result }}" = "success" ] && \
           [ "${{ needs.build-test.result }}" = "success" ]; then
          echo "✅ All critical CI checks passed!"
          exit 0
        else
          echo "❌ Critical CI checks failed:"
          echo "  Lint & TypeCheck: ${{ needs.lint-and-typecheck.result }}"
          echo "  Build Test: ${{ needs.build-test.result }}"
          exit 1
        fi