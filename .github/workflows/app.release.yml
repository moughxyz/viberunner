name: Release

on:
  push:
    tags:
      - 'v*'
    paths:
      - 'packages/app/**'
      - 'package.json'
      - 'yarn.lock'
      - '.github/workflows/app.release.yml'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            arch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Restore certificate into a temp keychain
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        echo "$MAC_CERT_B64" | base64 --decode > cert.p12
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security import cert.p12 -k build.keychain -P "$MAC_CERT_PASSWORD" \
          -T /usr/bin/codesign -T /usr/bin/productbuild
        security set-key-partition-list -S apple-tool:,apple: -s \
          -k "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
      env:
        MAC_CERT_B64: ${{ secrets.MAC_CERT_B64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      shell: bash
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

    - name: Cache yarn dependencies
      uses: actions/cache@v4
      id: yarn-cache
      with:
        path: |
          ${{ steps.yarn-cache-dir-path.outputs.dir }}
          node_modules
          packages/*/node_modules
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: yarn install --immutable

    - name: Build renderer
      run: yarn workspace viberunner run build

    - name: Create distributables
      shell: bash
      env:
        # Pass GitHub secrets as environment variables for macOS code signing
        OSX_SIGN_IDENTITY: ${{ matrix.os == 'macos-latest' && secrets.OSX_SIGN_IDENTITY || '' }}
        VR_APPLE_ID: ${{ matrix.os == 'macos-latest' && secrets.VR_APPLE_ID || '' }}
        VR_APPLE_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.VR_APPLE_PASSWORD || '' }}
        VR_APPLE_TEAM_ID: ${{ matrix.os == 'macos-latest' && secrets.VR_APPLE_TEAM_ID || '' }}
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          yarn workspace viberunner run make -- --arch=universal --platform=darwin
        else
          yarn workspace viberunner run make
        fi

    - name: Test packaged app exists
      shell: bash
      working-directory: packages/app
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          test -d "out/viberunner-win32-x64" || test -d "out/make"
          echo "✅ Windows package created successfully"
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          test -d "out/viberunner-darwin-universal" || test -d "out/make"
          echo "✅ macOS universal package created successfully"
          # Show package contents for debugging
          ls -la out/ || true
          find out/ -name "*.dmg" -exec ls -lh {} \; || true
          find out/ -name "*.app" -exec ls -lh {} \; || true
          # Verify code signing and universal binary (if signed)
          if [ -d "out/viberunner-darwin-universal/viberunner.app" ]; then
            codesign --verify --deep --strict --verbose=2 out/viberunner-darwin-universal/viberunner.app || echo "⚠️ Code signing verification failed or app is unsigned"
            # Check if it's actually a universal binary
            file out/viberunner-darwin-universal/viberunner.app/Contents/MacOS/viberunner || echo "⚠️ Could not check binary architecture"
            lipo -info out/viberunner-darwin-universal/viberunner.app/Contents/MacOS/viberunner || echo "⚠️ Could not get architecture info"
          fi
        else
          test -d "out/viberunner-linux-x64" || test -d "out/make"
          echo "✅ Linux package created successfully"
        fi

    - name: List build artifacts
      shell: bash
      working-directory: packages/app
      run: |
        echo "Build artifacts in out/make:"
        find ./out/make -type f -name "*.zip" -o -name "*.dmg" -o -name "*.exe" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" | sort

    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      with:
        repository: ${{ github.repository_owner }}/viberunner-releases
        tag_name: ${{ github.ref_name }}
        name: Viberunner ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Viberunner ${{ github.ref_name }}

          **New Release Available**

          This release includes builds for all major platforms:

          ### Download Instructions

          - **macOS**: Download the `.dmg` file for easy installation, or the `.zip` for portable use
          - **Windows**: Download the Setup `.exe` file for installation
          - **Linux**: Choose from `.deb` (Ubuntu/Debian), `.rpm` (RHEL/Fedora), or `.zip` for portable use

          ### Installation Notes

          - **macOS**: You may need to allow the app in System Preferences > Security & Privacy
          - **Windows**: The app is not signed, so Windows Defender may show a warning
          - **Linux**: Install the package using your package manager or extract the zip file
        files: |
          packages/app/out/make/**/*.dmg
          packages/app/out/make/**/*.zip
          packages/app/out/make/**/*.exe
          packages/app/out/make/**/*.deb
          packages/app/out/make/**/*.rpm
          packages/app/out/make/**/*.AppImage
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}